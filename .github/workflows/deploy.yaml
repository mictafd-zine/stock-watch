# Push Docker image for 'infra' to AWS ECR

name: Push Docker Image to ECR

on:
  push:
    branches:
      - "test-lambda-deployment"
    paths:
      - "infra/**" # trigger when infrastructure changes
      - "lambdas_source_code/**"  # trigger when lambda source code changes
      - ".github/workflows/**" # trigger when this CI/CD workflow changes

jobs:
  push-to-ecr:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Create ECR Repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names stock-watch-repo --region $AWS_REGION || \
        aws ecr create-repository --repository-name stock-watch-repo --region $AWS_REGION
      

    # Log in to Amazon ECR using environment variables for credentials
    - name: Log in to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

    # Build and tag the Docker image
    - name: Build and tag Docker image
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        IMAGE_NAME="stock-data-ingestion" # Corrected repository name
        IMAGE_TAG="latest"
        docker build -f ./lambdas_source_code/data_ingestion -t $IMAGE_NAME:$IMAGE_TAG .


    # Push the Docker image to AWS ECR
    - name: Push to Amazon ECR
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        IMAGE_NAME="stock-data-ingestion"
        IMAGE_TAG="latest"
        ECR_REPO_NAME="stock-watch-repo"
        ECR_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME"
        
        # Debugging step: echo the ECR_URI to ensure correct substitution
        echo "ECR URI: $ECR_URI"
        
        # Tag the Docker image with the full ECR URI
        docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
        
        # Push the Docker image to Amazon ECR
        docker push $ECR_URI:$IMAGE_TAG

    - name: Update Lambda function with the latest image
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        
        
      run: |
        FUNCTION_NAME="AlphaVantageLambdaDataIngestion"  
        IMAGE_TAG="latest"
        ECR_REPO_NAME="stock-watch-repo"
        ECR_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME"
        
        # Update the Lambda function with the new image from ECR
        aws lambda update-function-code \
          --function-name $FUNCTION_NAME \
          --image-uri $ECR_URI:$IMAGE_TAG \
          --region $AWS_REGION

