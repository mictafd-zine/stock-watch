[0m[1mvar.alpha_vantage_secret_name[0m
  The name or ARN of the secret stored in AWS Secrets Manager

  [1mEnter a value:[0m [0m
[0m[1mdata.aws_secretsmanager_secret.alpha_vantage_secret: Reading...[0m[0m
[0m[1mdata.aws_ecr_repository.lambda_repository: Reading...[0m[0m
[0m[1mdata.aws_ecr_repository.lambda_repository: Read complete after 0s [id=stock-watch-repo][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform planned the following actions, but then encountered a problem:

[1m  # aws_cloudwatch_event_rule.every_hour[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "every_hour" {
      [32m+[0m[0m arn                 = (known after apply)
      [32m+[0m[0m event_bus_name      = "default"
      [32m+[0m[0m force_destroy       = false
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "EveryHour"
      [32m+[0m[0m name_prefix         = (known after apply)
      [32m+[0m[0m schedule_expression = "rate(1 hour)"
      [32m+[0m[0m tags_all            = (known after apply)
    }

[1m  # aws_cloudwatch_event_target.lambda_target[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "lambda_target" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = "EveryHour"
      [32m+[0m[0m target_id      = "AlphaVantageLambdaDataIngestion"
    }

[1m  # aws_iam_role.data_ingestion_lambda_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "data_ingestion_lambda_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "AlphaVantageLambdaDataIngestion_role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_lambda_function.data_ingestion_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "data_ingestion_lambda" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m function_name                  = "AlphaVantageLambdaDataIngestion"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m image_uri                      = "348826608386.dkr.ecr.eu-west-1.amazonaws.com/stock-watch-repo:latest"
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Image"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
      [32m+[0m[0m timeout                        = 10
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "REGION"      = "eu-west-1"
              [32m+[0m[0m "S3_BUCKET"   = "alpha-vantage-data-storage"
              [32m+[0m[0m "SECRET_NAME" = ""
            }
        }
    }

[1m  # aws_lambda_permission.allow_cloudwatch[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_cloudwatch" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "AlphaVantageLambdaDataIngestion"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "events.amazonaws.com"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = "AllowExecutionFromCloudWatch"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_s3_bucket.raw_data_storage_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "raw_data_storage_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "alpha-vantage-data-storage"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1mPlan:[0m 6 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cloudwatch_rule_name = "EveryHour"
  [32m+[0m[0m lambda_function_name = "AlphaVantageLambdaDataIngestion"
  [32m+[0m[0m s3_bucket_name       = "alpha-vantage-data-storage"
